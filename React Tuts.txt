Component --> function that returns a virtual dom 
In react we dont use classname to retrive elements from the page
props contain object of key,value pair of attribute and value
proptypes defiine what a component can take and of what type
to pass number in components we have to use it as a expressions EX:attribute={3}
if , for are statment and not expression and thus cant be used in JSX


Stateless Functional Component: A component defined as a function. It takes only props as an argument and returns a virtual DOM.
Component Class: A component definition that can include things like state, helper methods and other advanced hooks into the page’s DOM

state is just a piece of data(initial value) which changes over time , events happens and state is mutated

//SFC Stateles Functional Component Example
//Check in src for Class implementations
function Counter(props) {
 	return (
 		<div className="counter">
 			<button className="counter-action decrement"> - </button>
 			<div className="counter-score">{props.score}</div>
 			<button className="counter-action increment"> + </button>
 		</div>
 	);
 }

Application.propTypes = {
	title: React.PropTypes.string
};

Application.defaultProps = {
	title: "Default Title"
}

//StateFul Component
var Counter = React.createClass({
	propTypes:{
		initialScore:React.PropTypes.number.isRequired
	},
	getInitialState: function(){
		return {
			score:this.props.initialScore
		}
	},
	incrementScore:function(e){
		this.setState({
			score: (this.state.score + 1)
		})
	},
	decrementScore:function(e){
		this.setState({
			score: (this.state.score - 1)
		})
	},
	render: function () {
		return (
			<div className="counter">
				<button className="counter-action decrement" onClick={this.decrementScore}> - </button>
				<div className="counter-score">{this.state.score}</div>
				<button className="counter-action increment" onClick={this.incrementScore}> + </button>
			</div>);
	}
})


Assigning directly to state object will not re render the component, to re render always use setstate methods
no need to use bind call for this propert , react does this automatically

Two Main Types of state are there:-
1. Application State
2.Component State

Data flows from paretn to child as props(unidriectional flow)

application state should be in highest level component

REDUX

Two types of component 
Presentational Component
Container Component : how things works, get data from state and give them to presentational component to render them 

Presentation Componets are of two types
Logical
React components
Mange own state
My or may not take part in lifecycle 


Pure
Pure functions
Stateless
Rely on props
Don’t take part in life cycle events

Container Component: Redux aware component that usually defines no markup of its own but instead relies on composing presentational components into a cohesive UI
Logical Component: Presentational component that has its own state to manage and may or may not make use of React lifecycle events
Pure Component: Presentation component that is implemented as a pure function. These components are passed props and return markup, no questions asked, no side-effects. That means they do not manage a state of their own and do not take part in React life cycle events.
Component Hierarchy: A composition of React components represented as a tree that depicts the component structure.

Actions are defined as string literals and change the state of the application
Action Returns a new state via reducers
Actions are event that change state
Reducers are pure functions (Not mutate state)

Reducer: A Redux construct that is responsible for maintaining a specific portion of the Redux store. 
In JavaScript, a reducer is implemented as a pure function that takes two arguments, 
the current state and the action being taken, and produces the next state. 
In order for Redux to work properly, Reducers must not mutate the current state. 
In other words, the state for a reducer must be treated as immutable.

Actions: Explicit events that occur in our application represented by a type and any relevant metadata associated with the action
Action Creators: In Redux, a construct for generating an action.





